#!/usr/bin/env node

const
DEPS=0,STYLE=1,SPEC=2,PANE=3,FLYER=4,
ID=0,TYPE=1,VALUE=2,EXTRA=3

var
fs=require('fs'),
path=require('path'),
CleanCSS=require('clean-css'),
proj=process.argv[2],
env=process.argv[3]||'pro',
cwd=path.resolve(process.cwd(),process.argv[4]||'.'),
srcDir=path.resolve(cwd,process.argv[5]||'mod'),
cfgDir=path.resolve(cwd,process.argv[6]||'cfg'),
distDir=path.resolve(cwd,process.argv[7]||'bin'),
mainjs=process.argv[8]||'main.js',
setup=function(cb){
    var
    rawProjPath=path.resolve(cfgDir,`proj-${proj}.json`),
    rawEnvPath=path.resolve(cfgDir,`env-${proj}-${env}.json`),
    projPath=path.resolve(cfgDir,'project.json'),
    envPath=path.resolve(cfgDir,'env.json')

    fs.stat(rawProjPath, (err, stat)=>{
        if (err) return cb(err)
        fs.stat(rawEnvPath, (err, stat)=>{
            if (err) return cb(err)
			try{var json=JSON.parse(fs.readFileSync(rawProjPath))}
			catch(exp){return console.error(exp)}
            fs.writeFileSync(envPath, fs.readFileSync(rawEnvPath))
            fs.mkdir(distDir, 0o755, (err)=>{
                if (err && 'EEXIST'!==err.code) return cb(err)
                fs.mkdir(path.resolve(distDir,proj), 0o755, (err)=>{
                    if (err && 'EEXIST'!==err.code) return cb(err)
                    cb(null, json, projPath, path.resolve(distDir,proj,'project.js'))
                })
            })
        })
    })
},
getPath=function(spec, narr, include, style){
	switch(spec[TYPE]){
	case 'file':
		if ('css'===spec[ID]){
			style.add(spec[VALUE])
		}else{
			include.add(spec[VALUE])
			narr.push(spec)
		}
		return false
	case 'view':
	case 'ctrl':
		var path=spec[EXTRA]||spec[ID]
		if (Array.isArray(path)) path.forEach((p)=>{include.add(p)})
		else include.add(path)

		var nspec=spec.slice()
		nspec[VALUE]=[]
		narr.push(nspec)
		break
	default:
		narr.push(spec)
		return false
	}
    return true
},
scan=function(arr, narr, include, style, cb){
    if (!arr || !Array.isArray(arr) || !arr.length) return cb(null, include, style)
    var spec=arr.shift()
    if (getPath(spec, narr, include, style)){
        scan(spec[VALUE], narr[narr.length-1][VALUE], include, style, (err, include, style)=>{
            if (err) return console.error(err)
            scan(arr, narr, include, style, cb)
        })
    }else{
        scan(arr, narr, include, style, cb)
    }
},
scanPane=function(keys, panes, npanes, include, style, cb){
    if (!keys || !keys.length) return cb(null, include, style)
    var
	key=keys.shift(),
	pane=panes[key]
    if (!pane) return scanPane(keys, panes, npanes, include, style, cb)
	var npane=[]
	npanes[key]=npane
    scan(pane, npane, include, style, (err, include, style)=>{
        if (err) return console.error(err)
        scanPane(keys, panes, npanes, include, style, cb)
    })
},
writeCSS=function(style, cb){
	var
	content='',
	src=proj+'.css',
	target=path.resolve(distDir,proj,proj+'.css')

	style.forEach((v)=>{
		content+=`@import url(${srcDir+path.sep+v});\n`
	})
	fs.writeFile(src, content, 'utf8', (err)=>{
		if (err) cb(err)
		new CleanCSS({rebase:false,sourceMap:true,target:target}).minify(content, (err, minified)=>{
			if (err) return cb(err)
			fs.writeFile(target, minified.styles, 'utf8', (err)=>{
				if (err) return cb(err)
				fs.writeFile(target+'.map', minified.sourceMap.toString(), 'utf8', cb)
			})
		})
	})
}

if (3 > process.argv.length) return console.log(process.argv[1],'PROJ_NAME','[ENV]','[cwd]','[mod]','[cfg]','[bin]','[main.js]')

process.chdir(cwd)

setup((err, project, projPath, outPath)=>{
	if (err) return console.error(err)

	var deps=new Set(project[DEPS])
	deps.add('lib/underscore-min.js')
	deps.add('lib/backbone-min.js')
	deps.add('lib/backbone.native.min.js')
	deps.add('lib/lean/lean.min.js')
	deps.add('lib/pico.min.js')

	// global
	__={ajax:null,onLoad:null}
	_=require('underscore')
	Backbone=require('backbone')
	pico=require('./lib/pico.js')
	window={localStorage:{},location:{}}

	var filteredProj=[project[DEPS], [...project[STYLE],proj+'.css'], [], {}, project[FLYER]]

	scan(project[SPEC], filteredProj[SPEC], new Set, new Set, (err, include, style)=>{
		if (err) return console.error(err)
		var
		panes=project[PANE],
		keys=Object.keys(panes)

		scanPane(keys, panes, filteredProj[PANE], include, style, (err, include, style)=>{
			if (err) return console.error(err)

            fs.writeFile(projPath, JSON.stringify(filteredProj),(err)=>{
				if (err) return console.error(err)
				writeCSS(style,(err)=>{
					if (err) return console.error(err)

					pico.build({
						entry:path.resolve(srcDir,mainjs),
						output:outPath,
						deps:[...deps],
						include:[...include],
						exclude:[path.basename(mainjs,'.js')] 
					})
				})
			})
		})
    })
})
