#!/usr/bin/env node

const
fs = require('fs'),
path = require('path'),
Transform = require('stream').Transform,
util = require('util'),
argv=process.argv,
projPath = argv[2],
projId = argv[3],
projName = argv[4],
replace = []

if (5 > argv.length) return console.log('USAGE: '+argv[1]+' path id name')

function ReplaceTransform(options){
    if (!(this instanceof ReplaceTransform)) return new ReplaceTransform(options)

    replace.push(/PROJ_ID/g, projId)
    replace.push(/PROJ_NAME/g, projName)

    Transform.call(this, options)
}
util.inherits(ReplaceTransform, Transform)

ReplaceTransform.prototype._transform = function(chunk, encoding, cb){
    let str = 'string' === typeof chunk ? chunk : chunk.toString()
    for(let i=0,l=replace.length; i<l; i+=2){
        str = str.replace(replace[i], replace[i+1])
    }
    this.push(new Buffer(str), encoding)
    cb(null)
}

function symlink(fs, from, to, ln){
	fs.symlinkSync(path.relative(to,from), path.resolve(to, ln))
}

fs.readlink(argv[1], (err, realPath)=>{
    if (err) realPath = argv[1]
	realPath=path.dirname(realPath)
    const srcDir = path.resolve(realPath,'sdk')
    fs.mkdir(projPath, 0777, ()=>{
        (function(dirs, cb){
            if (!dirs.length) return cb()
            const next = arguments.callee
            fs.mkdir(path.resolve(projPath,dirs.shift()), 0777, ()=>{
                next(dirs, cb) 
            })
        })(['js','mod','cfg','run','bin','dat'], ()=>{
            (function(files, cb){
                if (!files.length) return cb()
                const 
                fname = files.shift()
                dest = path.resolve(projPath, files.shift(), files.shift()||fname)
                fs.createReadStream(path.resolve(srcDir,fname))
                .pipe(new ReplaceTransform({decodeStrings:false}))
                .pipe(fs.createWriteStream(dest))
                arguments.callee(files, cb)
            })([
                'index.html','',null,
                'project.json','cfg',`proj-${projId}.json`,
                'env.json','cfg',`env-${projId}-dev.json`,
                'main.js','mod',null,
				'Frame.js','js',null,
				'Model.js','js',null,
				'Module.js','js',null,
				'Pane.js','js',null,
				'Router.js','js',null,
				'Socket.js','js',null,
				'Stream.js','js',null,
				'Worker.js','js',null,
				'Service.js','js',null,
				'network.js','js',null,
				'sigslot.js','js',null,
				'specMgr.js','js',null
                ], ()=>{
					const projLib=path.resolve(projPath,'lib')
					const projRun=path.resolve(projPath,'run')
					fs.mkdirSync(projLib, 0o755)
					symlink(fs, path.resolve(realPath,'..','lean-wrap','bin'), projLib, 'lean')
					symlink(fs, path.resolve(realPath,'..','pico-common','bin'), projLib, 'common')
					symlink(fs, path.resolve(realPath,'..','pojs','lib'), projLib, 'pojs')
					symlink(fs, path.resolve(realPath,'..','pico-client','sdk'), projLib, 'pico')
					symlink(fs, path.resolve(realPath,'..','build'), projRun, 'build')
					symlink(fs, path.resolve(realPath,'..','update'), projRun, 'update')
					console.log('Done')
            })
        })
    })
})
