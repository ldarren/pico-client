#!/usr/bin/env node

var
fs = require('fs'),
path = require('path'),
Transform = require('stream').Transform,
util = require('util'),
projPath = process.argv[2],
projName = process.argv[3],
projLib = process.argv[4],
replace = []

if (!projPath || !projName) return console.log('USAGE: '+process.argv[1]+' path name [lib]')

function ReplaceTransform(options){
    if (!(this instanceof ReplaceTransform)) return new ReplaceTransform(options)

    replace.push(/PROJ_NAME/g, projName)

    Transform.call(this, options)
}
util.inherits(ReplaceTransform, Transform)

ReplaceTransform.prototype._transform = function(chunk, encoding, cb){
    var str = 'string' === typeof chunk ? chunk : chunk.toString()
    for(var i=0,l=replace.length; i<l; i+=2){
        str = str.replace(replace[i], replace[i+1])
    }
    this.push(new Buffer(str), encoding)
    cb(null)
}

function symlink(fs, from, to, ln, cb){
	fs.symlink(path.relative(to,from), path.resolve(to, ln), cb)
}

fs.readlink(process.argv[1], (err, realPath)=>{
    if (err) realPath = process.argv[1]
	realPath=path.dirname(realPath)
	projLib=path.resolve(realPath,'lib')
    var srcDir = path.resolve(realPath,'sdk')
    fs.mkdir(projPath, 0777, ()=>{
        (function(dirs, cb){
            if (!dirs.length) return cb()
            var next = arguments.callee
            fs.mkdir(path.resolve(projPath,dirs.shift()), 0777, ()=>{
                next(dirs, cb) 
            })
        })(['js','mod','cfg','run','bin','dat'], ()=>{
            (function(files, cb){
                if (!files.length) return cb()
                var
                fname = files.shift()
                dest = path.resolve(projPath, files.shift(), fname)
                fs.createReadStream(path.resolve(srcDir,fname))
                .pipe(new ReplaceTransform({decodeStrings:false}))
                .pipe(fs.createWriteStream(dest))
                arguments.callee(files, cb)
            })([
                'index.html','',
                'project.json','cfg',
                'env.json','cfg',
                'main.js','mod',
				'Frame.js','js',
				'Model.js','js',
				'Module.js','js',
				'Pane.js','js',
				'Router.js','js',
				'Socket.js','js',
				'Stream.js','js',
				'network.js','js',
				'sigslot.js','js',
				'specMgr.js','js'
                ], ()=>{
                symlink(fs, projLib, projPath, 'lib', ()=>{
					symlink(fs, path.resolve(srcDir,'..','build'), path.resolve(projPath,'run'), 'build', ()=>{
						symlink(fs, path.resolve(srcDir,'..','update'), path.resolve(projPath,'run'), 'update', ()=>{
							console.log('Done')
						})
					})
                })
            })
        })
    })
})
